"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express = require('express');
const router = express.Router();
const auth_1 = require("../controllers/auth");
const upload_1 = require("../utils/upload");
const follow_1 = require("../controllers/follow");
// import { createReaction, deleteReaction, getAverageRating, getLikes } from "../controllers/reaction";
// import { getProfile, getProfiles } from "../controllers/profile";
const upload_2 = require("../controllers/upload");
const video_1 = require("../controllers/video");
const allowRoles_1 = require("../middleware/allowRoles");
const enum_1 = require("../enum");
const creator_1 = require("../controllers/creator");
const reaction_1 = require("../controllers/reaction");
router.post('/auth/register', auth_1.register);
router.post('/auth/send-otp', auth_1.sendOTP);
router.post('/auth/verify-otp', auth_1.verifyOTP);
router.post('/auth/login', auth_1.login);
router.get('/auth/me', auth_1.me);
router.post('/auth/reset-password', auth_1.resetPassword);
router.post('/auth/change-password', (0, allowRoles_1.allowRoles)('*'), auth_1.changePassword);
router.post('update-profile', (0, allowRoles_1.allowRoles)('*'), auth_1.updateProfile);
// router.get('/profiles', getProfiles);
// router.get('/profiles/:userId', getProfile);
router.post('/uploads/avatar', (0, allowRoles_1.allowRoles)('*'), upload_1.upload.single('avatar'), upload_2.uploadFile);
router.post('/uploads/video', (0, allowRoles_1.allowRoles)(enum_1.UserRole.CREATOR), upload_1.upload.single('video'), upload_2.uploadFile);
router.post('/uploads/thumbnail', (0, allowRoles_1.allowRoles)(enum_1.UserRole.CREATOR), upload_1.upload.single('thumbnail'), upload_2.uploadFile);
router.post('/upgrade-to-creator', (0, allowRoles_1.allowRoles)(enum_1.UserRole.VIEWER), creator_1.upgradeToCreator);
router.get('/admin/creators', (0, allowRoles_1.allowRoles)(enum_1.UserRole.ADMIN), creator_1.getCreators);
router.get('/admin/creators/:creatorId', (0, allowRoles_1.allowRoles)(enum_1.UserRole.ADMIN), creator_1.getCreator);
router.post('/admin/approve-creator/:creatorId', (0, allowRoles_1.allowRoles)(enum_1.UserRole.ADMIN), creator_1.approveCreator);
router.post('/admin/reject-creator/:creatorId', (0, allowRoles_1.allowRoles)(enum_1.UserRole.ADMIN), creator_1.rejectCreator);
router.get('/videos', (0, allowRoles_1.allowRoles)('*'), video_1.getVideos);
router.get('/my-videos', (0, allowRoles_1.allowRoles)(enum_1.UserRole.CREATOR), video_1.getMyVideos);
router.get('/videos/:videoId', (0, allowRoles_1.allowRoles)('*'), video_1.getVideo);
router.post('/videos', (0, allowRoles_1.allowRoles)(enum_1.UserRole.CREATOR), video_1.createVideo);
router.put('/videos/:videoId', (0, allowRoles_1.allowRoles)(enum_1.UserRole.CREATOR), video_1.updateVideo);
router.post('/view-video/:videoId', (0, allowRoles_1.allowRoles)('*'), video_1.viewVideo);
router.post('/archive-video/:videoId', (0, allowRoles_1.allowRoles)(enum_1.UserRole.CREATOR), video_1.archiveVideo);
router.post('/publish-video/:videoId', (0, allowRoles_1.allowRoles)(enum_1.UserRole.CREATOR), video_1.publishVideo);
router.post('/follow', follow_1.follow);
router.delete('/unfollow', follow_1.unfollow);
router.get('/is-following/:followingId', follow_1.isFollowing);
router.get('/followers', follow_1.getFollowers);
router.get('/followings', follow_1.getFollowing);
router.post('/toggle-like/:videoId', reaction_1.toogleLike);
router.get('/is-liked/:videoId', reaction_1.isLiked);
router.get('/comment/:videoId', reaction_1.getComments);
router.post('/comment', reaction_1.addComment);
router.put('/comment/', reaction_1.editComment);
router.delete('/comment/:videoId', reaction_1.deleteComment);
exports.default = router;
